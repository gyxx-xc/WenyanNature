{
  "name": "方術第五",
  "icon": "minecraft:book",
  "category": "wenyan_programming:syntax",
  "sortnum": 5,
  "pages": [
    {
      "type": "patchouli:text",
      "text": "函数有两种调用方式，其含义相同。第二种方式会将前一个函数之结果作为参数传递，适用于需要基于计算结果进行后续操作之场景。此外，计算本身亦为一种函数，称为\"关键字函数\"。此类函数无需括号或调用关键字即可直接使用。"
    },
    {
      "type": "wenyan_programming:code_page",
      "code": "施「甲」於一於四。\n夫一。夫四。取三以施「甲」。\n加一以二\n夫一。夫二。取二以加。",
      "text": "以上示例中，$(#F00)施「甲」於一於四/$ 与 $(#F00)夫一。夫四。取三以施「甲」/$ 分别展示两种调用方式。第二种方式会将前面之计算结果作为参数传递给函数甲。"
    },
    {
      "type": "wenyan_programming:code_page",
      "code": "吾有一術。名之曰「法」。是術曰。\n    xxx\n是謂「法」之術也。\n\n吾有一術 名之曰「三法」。\n    欲行是術 必先得 二數曰「甲」曰「乙」。一言曰「丙」。是術曰。\n    xxx\n是謂「三法」之術也。",
      "text": "函数可定义，支持无参数或带参数之形式。"
    },
    {
      "type": "wenyan_programming:code_page",
      "code": "吾有一術 名之曰「法」。\n    欲行是術 必先得一言曰「甲」。是術曰。\n    加「甲」以一。書之。\n是謂「法」之術也。\n施「法」於二",
      "text": "参数 甲 被定义为字符串类型（一言），因此输入参数会自动转为字符串<br>运行结果为 二一 而非 三，因为输入参数二被转为字符串后与一拼接。"
    },
    {
      "type": "patchouli:text",
      "text": "函数支持嵌套定义，即函数内部可再定义函数。函数亦可作为参数传递，或作为返回值。$(p)函数内部语句可直接访问外部变量，作用域规则与 Python 类似。函数内部声明的变量在函数返回时销毁。"
    },
    {
      "type": "wenyan_programming:code_page",
      "code": "乃得一。\n乃得矣。\n乃歸。",
      "text": "函数可通过以下方式返回值：<br>乃得一：返回数值 1。<br>乃得矣：返回函数的最后计算结果。<br>乃歸：无返回值，直接退出函数。"
    },
    {
      "type": "wenyan_programming:code_page",
      "code": "施「法」。加之以一。加之以一。\n取三以施「三法」。名之曰「甲」。",
      "text": "要使用函数返回值，可使用 其 或 之。"
    }
  ]
}

